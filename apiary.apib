FORMAT: 1A

# studyBox

Study Box REST API backend documentation and mock.

# Change log

## 06/05/2016 toja
 - changing getting random deck
## 03/05/2016 toja
 - added creation date to Deck model
## 28/04/2016 arka
 - fixed tips to current state
## 28/04/2016 toja
 - name of parameter isEnabled changed to flashcardsCount
## 17/04/2016 toja
 - added resource to list flashcards with tips count 
## 14/04/2016 toja
 - added parameter to show flashcards visibility
## 06/04/2016 toja
 - updated description of decks resources
 - fixes in response codes
## 06/04/2016 arka
 - added 'Get random Deck' resource
## 04/04/2016 toja
 - added 'Get Random Flashcards' resource
## 30/03/2016 toja
 - added resources to get user's decks
## 23/03/2016 toja
 - method to get logged user added
## 16/03/2016 toja
 - resources for Test results added
 - name of boolean statusEnabled changed to isEnabled
 - name of boolean public changed to isPublic
## 12/03/2016 arka
 - added tags and tips
 - added "public" field for decks
## 04/03/2016 arka
 - create unique objects for collections
## 01/03/2016 mlo
 - resources to create or update shouldn't have id
 - document HTTP 400 bad request response
 - synchronize with github repository, branch: documentation
## 29/02/2016 mlo
- create initial doc with example entity CRUD
 

# TODO
- Document CRUD for stat

# Client errors 

Response with HTTP code different then **2xx** family should be treated as a failure response. 
By default API return response with HTTP code **4xx** family.
Any response with HTTP code **500** should be reported ASAP to BE team

### Example HTTP 400 Bad request response:
```
{
    "errors": [
            "The name of entity may not be empty",
            "The email field is required"
            ]
}
```

### Example HTTP 500 Bad request response:
```
{
    "code":500,
    "message":"There was an error processing your request. It has been logged (ID 4b36a3a3c944026d)."
}
```

# Anonymous user endpoints availability

By anonymous user request we are understanding a request with no basic auth header.
All GET requests on every endpoint are anonymous-acceptable, although no other request type is allowed.

# Group Deck

## Decks [/decks]

### Create new Deck [POST]

+ Request (application/json)

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

    + Attributes (DeckWithoutId)

+ Response 201 (application/json)

    This response is returned when deck was created.

    + Attributes (Deck)

### Get Deck by ID [GET /decks/{deckId}]

+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

+ Response 200 (application/json)
    + Attributes (Deck)

### Get random Deck [GET /decks/random{?flashcardsCount}]

+ Parameters
    + flashcardsCount (optional, boolean, `true`) - show number of contained flashcards.
    
+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==    

+ Response 200 (application/json)
    + Attributes (Deck)

### Get all Decks [GET /decks{?includeOwn}{?flashcardsCount}{?name}]

+ Parameters
    + includeOwn (optional, boolean, `true`) - include decks created by logged user
    + name (string, optional) - name of a deck to find
    + flashcardsCount (optional, boolean, `true`) - show number of contained flashcards.

+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

+ Response 200 (application/json)
    + Attributes (DeckWithEmailCollection)

### Get all User's Decks [GET /decks/me{?flashcardsCount}]

+ Parameters
    + flashcardsCount (optional, boolean, `true`) - show number of contained flashcards.

+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

+ Response 200 (application/json)
    + Attributes (DeckCollection)
    

### Update Deck [PUT /decks/{deckId}]

+ Parameters
    
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID to update

+ Request (application/json)

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

    + Attributes (DeckWithoutId)

+ Response 200 (application/json)

    This response is returned when deck was updated.
    
    + Attributes (Deck)

### Remove Deck [DELETE /decks/{deckId}]

+ Parameters
    + deckId: `1212-1212-1212-121212121212` (string, required) - deck UUID to remove
    
+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

+ Response 204

### Change access to Deck [POST /decks/{deckId}/public/{isPublic}]

+ Parameters
    + deckId: `1212-1212-1212-121212121212` (string, required) - deck UUID to update
    + isPublic: false (boolean, required) - value to be set in isPublic field
    
+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA==

+ Response 204

# Group Flashcard

## Flashcards [/decks/{deckId}/flashcards]

### Create new Flashcard [POST]

+ Request (application/json)

    + Attributes (FlashcardWithoutId)

+ Response 201 (application/json)

    This response is returned when flashcard was created.
    
    + Attributes (Flashcard)

### Get Flashcard by ID [GET /decks/{deckId}/flashcards/{flashcardId}]

+ Response 200 (application/json)
    + Attributes (Flashcard)

### List all Flashcards in Deck [GET]

+ Response 200 (application/json)
    + Attributes (FlashcardCollection)
    
### List Flashcards with Tips Count [GET /decks/{deckId}/flashcards{?tipsCount}]

+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    + tipsCount: `true` (boolean, optional) - to show amount of tips for each flashcard
    
+ Response 200 (application/json)
    + Attributes (FlashcardWithCountCollection)

### Update Flashcard [PUT /decks/{deckId}/flashcards/{flashcardId}]

+ Parameters
    
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    + flashcardId: `1233-0000-0000-000000000001` (string, required) - flashcard UUID to update

+ Request (application/json)

    + Attributes (FlashcardWithoutId)

+ Response 200 (application/json)
    + Attributes (Flashcard)

### Remove Flashcard [DELETE /decks/{deckId}/flashcards/{flashcardId}]

+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    + flashcardId: `1233-0000-0000-000000000001` (string, required) - flashcard UUID to delete

+ Response 204

### Get Random Flashcards [GET /decks/{deckId}/flashcards{?random}]

+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    + random: `five` (string, required) - string that represents amount of random flashcards, can be
    one of the following values: `one`, `five`, `ten`, `fifteen`,  `twenty`

+ Response 200 (application/json)
    + Attributes (FlashcardCollection)

# Group User

## Users [/users]

### Create new User [POST]

+ Request (application/json)
    + Attributes (UserWithoutId)

+ Response 201 (application/json)
    + Attributes (UserWithoutPassword)


### Get User by ID [GET /users/{userId}]

+ Parameters
    + userId: `1233-0000-0000-000000000001` (string, required) - user's UUID

+ Response 200 (application/json)
    + Attributes (UserWithoutPassword)

### Update User [PUT /users/{userId}]

+ Parameters
    + userId: `1233-0000-0000-000000000001` (string, required) - user's UUID

+ Request (application/json)
    + Attributes (UserWithoutId)

+ Response 201 (application/json)

### Get logged User [GET /users/me]

+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA== 
        
+ Response 200 (application/json)
    + Attributes (UserWithoutPassword)
    

# Group Tip

## Tips [/decks/{deckId}/flashcards/{flashcardId}/tips]

### Create new Tip [POST]

+ Request (application/json)

    + Attributes (TipWithoutId)

+ Response 201 (application/json)

    This response is returned when tip was created.

    + Attributes (Tip)

### Get Tip by ID [GET /decks/{deckId}/flashcards/{flashcardId}/tips/{tipId}]

+ Response 200 (application/json)
    + Attributes (Tip)

### List all Tips [GET]

+ Response 200 (application/json)
    + Attributes (TipCollection)

### Update Tip [PUT /decks/{deckId}/flashcards/{flashcardId}/tips/{tipId}]

+ Parameters
    
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    + flashcardId: `1233-0000-0000-000000000001` (string, required) - flashcard UUID which contain tip
    + tipId: `1233-0000-0000-000000000001` (string, required) - tip UUID to update

+ Request (application/json)

    + Attributes (TipWithoutId)

+ Response 200 (application/json)

    This response is returned when tip was updated.
    
    + Attributes (Tip)

### Remove Tip [DELETE /decks/{deckId}/flashcards/{flashcardId}/tips/{tipId}]

+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    + flashcardId: `1233-0000-0000-000000000001` (string, required) - flashcard UUID which contain tip
    + tipId: `1233-0000-0000-000000000001` (string, required) - tip UUID to delete
+ Response 204

# Group Tag

## Tags [/decks/{deckId}/tags]

### Create new Tag [POST]

+ Request (application/json)

    + Attributes (TagWithoutId)

+ Response 201 (application/json)

    This response is returned when tag was created.

    + Attributes (Tag)

### Get Tag by ID [GET /decks/{deckId}/tags/{tagId}]

+ Response 200 (application/json)
    + Attributes (Tag)

### List all Tags [GET]

+ Response 200 (application/json)
    + Attributes (TagCollection)

### Update Tag [PUT /decks/{deckId}/tags/{tagId}]

+ Parameters
    
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain tag
    + tagId: `1233-0000-0000-000000000001` (string, required) - tag UUID to update


+ Request (application/json)

    + Attributes (TagWithoutId)

+ Response 200 (application/json)

    This response is returned when tag was updated.
    
    + Attributes (Tag)

### Remove Tag [DELETE /decks/{deckId}/tags/{tagId}]

+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain tag
    + tagId: `1233-0000-0000-000000000001` (string, required) - tag UUID to delete

+ Response 204

# Group Test Mode

## Test results [/decks/{deckId}/results]

### Get Test Results [GET]

+ Request

    + Headers

            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA== 
            
+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
    
+ Response 200 (application/json)
    + Attributes (FlashcardResultForUserCollection)

### Save Test Results [POST]

+ Parameters
    + deckId: `1233-0000-0000-000000000001` (string, required) - deck UUID which contain flashcard
            
+ Request (application/json)
    + Attributes (FlashcardResultCollection)
    + Headers
    
            Authorization: Basic dGVzdEBtYWlsLmNvbTpwYXNzd29yZA== 
    
+ Response 201 

# Data Structures

## Single objects

### UserBase (object)
+ email: `test@mail.com` (string, required) - email of the user
+ name: `Foo Bar` (string, required) - name of the user

### UserWithoutId (UserBase)
+ password: `password` (string, required) - encrypted password

### UserWithoutPassword (UserBase)
+ id: `12345678-9012-3456-7890-123456789012` (string, required) - user's id

### DeckWithoutId (object)
+ name: `Sample name` (string, required) - name attribute for Deck
+ isPublic: `true` (boolean, required) - status of Deck access rights

### Deck (DeckWithoutId)
+ id: `12345678-9012-3456-7890-123456789012` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ creatorEmail: `test@mail.com` (string, required) - email of a user which created a deck
+ creationDate: `2016-05-03 01:25:44.629` (string, required) - date od Deck creation 'in YYYY-MM-DD hh:mm:ss.SSS' format

### FlashcardWithoutId (object)
+ question: `Sample question` (string, required) - question attribute for Flashcard
+ answer: `Sample answer` (string, required) - answer attribute for Flashcard
+ isHidden: `false` (boolean, required) - visibility of Flashcard

### Flashcard (FlashcardWithoutId)
+ id: `12345678-9012-3456-7890-123456789012` (string, required) - Flashcard UUID, 36 chars, 8-4-4-4-12 chars
+ deckId: `291acb97-6f50-4522-8049-aee0b4e16b42` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars

### TipWithoutId (object)
+ essence: `Sample content` (string, required) - content of a Tip
+ difficult: `8` (number, required) - difficult level of a Tip, must be between 0 and 10

### Tip (TipWithoutId)
+ id: `12345678-9012-3456-7890-123456789012` (string, required) - tip UUID, 36 chars, 8-4-4-4-12 chars

### TagWithoutId (object)
+ name: `Sample tag name` (string) - name attribute for Tag

### Tag (TagWithoutId)
+ id: `12345678-9012-3456-7890-123456789012` (string, required) - tag UUID, 36 chars, 8-4-4-4-12 chars


## Objects for Collections

### Deck0 (object)
+ name: `First name` (string, required) - name attribute for Deck
+ id: `1d92b949-38c7-4a1a-a184-1b5fb469ad9b` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ isPublic: `true` (boolean, required) - status of Deck access rights
+ creationDate: `2016-05-03 01:25:44.629` (string, required) - date od Deck creation 'in YYYY-MM-DD hh:mm:ss.SSS' format

### Deck1 (object)
+ name: `Second name` (string, required) - name attribute for Deck
+ id: `6d48d685-53f4-4e41-aea0-ec54d8919f0b` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ isPublic: `false` (boolean, required) - status of Deck access rights
+ creationDate: `2016-05-01 01:25:44.629` (string, required) - date od Deck creation 'in YYYY-MM-DD hh:mm:ss.SSS' format

### Deck2 (object)
+ name: `Third name` (string, required) - name attribute for Deck
+ id: `0d081870-553c-4df7-b9e2-be7e5ba791c0` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ isPublic: `false` (boolean, required) - status of Deck access rights
+ creationDate: `2016-04-25 01:25:44.629` (string, required) - date od Deck creation 'in YYYY-MM-DD hh:mm:ss.SSS' format

### DeckWithEmail0 (Deck0)
+ creatorEmail: `test@mail.com` (string, required) - email of a user which created a deck

### DeckWithEmail1 (Deck1)
+ creatorEmail: `test@mail.com` (string, required) - email of a user which created a deck

### DeckWithEmail2 (Deck2)
+ creatorEmail: `test@mail.com` (string, required) - email of a user which created a deck

### DeckWithCount0 (Deck0)
+ count: `12` (number) - Count of the Flashcards in Deck

### DeckWithCount1 (Deck1)
+ count: `3456` (number) - Count of the Flashcards in Deck

### DeckWithCount2 (Deck2)
+ count: `789` (number) - Count of the Flashcards in Deck

### Flashcard0 (object)
+ id: `00e60c87-1fac-46dc-a7ee-1dd1f3996ccc` (string, required) - Flashcard UUID, 36 chars, 8-4-4-4-12 chars
+ question: `First question` (string) - question attribute for Flashcard
+ answer: `First answer` (string) - answer attribute for Flashcard
+ deckId: `291acb97-6f50-4522-8049-aee0b4e16b42` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ isHidden: `false` (boolean, required) - visibility of Flashcard

### Flashcard1 (object)
+ id: `2c8815e6-4e16-41ce-95bf-d0039c35af2d` (string, required) - Flashcard UUID, 36 chars, 8-4-4-4-12 chars
+ question: `Second question` (string) - question attribute for Flashcard
+ answer: `Second answer` (string) - answer attribute for Flashcard
+ deckId: `291acb97-6f50-4522-8049-aee0b4e16b42` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ isHidden: `true` (boolean, required) - visibility of Flashcard

### Flashcard2 (object)
+ id: `369f0665-c895-41bb-bede-62b443519964` (string, required) - Flashcard UUID, 36 chars, 8-4-4-4-12 chars
+ question: `Third question` (string) - question attribute for Flashcard
+ answer: `Third answer` (string) - answer attribute for Flashcard
+ deckId: `291acb97-6f50-4522-8049-aee0b4e16b42` (string, required) - Deck UUID, 36 chars, 8-4-4-4-12 chars
+ isHidden: `false` (boolean, required) - visibility of Flashcard

### FlashcardWithCount0 (Flashcard0)
+ tipsCount: `1` (number) - Count of Tips in a Flashcard

### FlashcardWithCount1 (Flashcard1)
+ tipsCount: `4` (number) - Count of Tips in a Flashcard

### FlashcardWithCount2 (Flashcard2)
+ tipsCount: `2` (number) - Count of Tips in a Flashcard

### Tip0 (object)
+ id: `51155739-1028-4479-a425-9ebaa501d9fe` (string, required) - Tip UUID, 36 chars, 8-4-4-4-12 chars
+ essence: `First tip content` (string, required) - content of a Tip
+ difficult: `0` (number, required) - difficult level of a Tip, must be between 0 and 10

### Tip1 (object)
+ id: `6351db42-6597-42ba-909c-11488ee9814a` (string, required) - Tip UUID, 36 chars, 8-4-4-4-12 chars
+ essence: `Second tip content` (string, required) - content of a Tip
+ difficult: `4` (number, required) - difficult level of a Tip, must be between 0 and 10

### Tip2 (object)
+ id: `e9b7760a-b645-4c35-9b4e-f5af5c1826c0` (string, required) - Tip UUID, 36 chars, 8-4-4-4-12 chars
+ essence: `Third tip tips content` (string, required) - content of a Tip
+ difficult: `9` (number, required) - difficult level of a Tip, must be between 0 and 10

### Tag0 (object)
+ id: `13972214-cf00-4239-aff6-eaad03f4b841` (string, required) - Tag UUID, 36 chars, 8-4-4-4-12 chars
+ name: `First sample tag name` (string) - name attribute for Tag

### Tag1 (object)
+ id: `2b8970c6-db84-4bbc-80d6-093f0aa22bdd` (string, required) - Tag UUID, 36 chars, 8-4-4-4-12 chars
+ name: `Second sample tag name` (string) - name attribute for Tag

### Tag2 (object)
+ id: `8ccc1c09-3f4a-4734-9c04-dc7bc4df15e2` (string, required) - Tag UUID, 36 chars, 8-4-4-4-12 chars
+ name: `Third sample tag name` (string) - name attribute for Tag

### FlashcardResult0 (object)
+ flashcardId: `00e60c87-1fac-46dc-a7ee-1dd1f3996ccc` (string, required) - Flashcard UUID
+ isCorrectAnswer: `true` (boolean, required) - Shows whether an answer was correct or not

### FlashcardResult1 (object)
+ flashcardId: `2c8815e6-4e16-41ce-95bf-d0039c35af2d` (string, required) - Flashcard UUID
+ isCorrectAnswer: `false` (boolean, required) - Shows whether an answer was correct or not

### FlashcardResult2 (object)
+ flashcardId: `369f0665-c895-41bb-bede-62b443519964` (string, required) - Flashcard UUID
+ isCorrectAnswer: `true` (boolean, required) - Shows whether an answer was correct or not

### FlashcardResultForUser0 (object)
+ flashcardId: `00e60c87-1fac-46dc-a7ee-1dd1f3996ccc` (string, required) - Flashcard UUID
+ correctAnswers: `1` (number, required) - Shows number of correct answers for a flashcard
+ userId: `5560063c-a336-43bd-85bc-4d13973509b5` (string, required) - User UUID

### FlashcardResultForUser1 (object)
+ flashcardId: `2c8815e6-4e16-41ce-95bf-d0039c35af2d` (string, required) - Flashcard UUID
+ correctAnswers: `12` (number, required) - Shows number of correct answers for a flashcard
+ userId: `5560063c-a336-43bd-85bc-4d13973509b5` (string, required) - User UUID

### FlashcardResultForUser2 (object)
+ flashcardId: `369f0665-c895-41bb-bede-62b443519964` (string, required) - Flashcard UUID
+ correctAnswers: `4` (number, required) - Shows number of correct answers for a flashcard
+ userId: `5560063c-a336-43bd-85bc-4d13973509b5` (string, required) - User UUID

## Collections

### DeckCollection (array)
+ (Deck0)
+ (Deck1)
+ (Deck2)

### DeckWithEmailCollection (array)
+ (DeckWithEmail0)
+ (DeckWithEmail1)
+ (DeckWithEmail2)

### FlashcardCollection (array)
+ (Flashcard0)
+ (Flashcard1)
+ (Flashcard2)

### FlashcardWithCountCollection (array)
+ (FlashcardWithCount0)
+ (FlashcardWithCount1)
+ (FlashcardWithCount2)

### DeckWithCountCollection (array)
+ (DeckWithCount0)
+ (DeckWithCount1)
+ (DeckWithCount2)

### TipCollection (array)
+ (Tip0)
+ (Tip1)
+ (Tip2)

### TagCollection (array)
+ (Tag0)
+ (Tag1)
+ (Tag2)

### FlashcardResultCollection (array)
+ (FlashcardResult0)
+ (FlashcardResult1)
+ (FlashcardResult2)

### FlashcardResultForUserCollection (array)
+ (FlashcardResultForUser0)
+ (FlashcardResultForUser1)
+ (FlashcardResultForUser2)

## BadRequestResponse (object)
+ code: `E001` (string, required) - TODO sample error code
+ message: `Id cannot be null` (string, required) - TODO sample error message - human readable